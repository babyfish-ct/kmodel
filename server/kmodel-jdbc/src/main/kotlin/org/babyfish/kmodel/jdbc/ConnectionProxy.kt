package org.babyfish.kmodel.jdbc

import org.babyfish.kmodel.jdbc.exec.ExecutionContext
import org.babyfish.kmodel.jdbc.metadata.ForeignKey
import java.lang.UnsupportedOperationException
import java.sql.CallableStatement
import java.sql.Connection
import java.sql.PreparedStatement
import java.sql.Statement

open class ConnectionProxy(
    val target: Connection,
    val cfg: Configuration
) : Connection by target {

    private var _executionContext: ExecutionContext? = null

    internal val executionContext: ExecutionContext
        get() {
            var ctx = _executionContext
            if (ctx === null) {
                ctx = ExecutionContext(cfg)
                _executionContext = ctx
            }
            return ctx
        }

    override fun createStatement(): Statement =
            StatementProxy(
                    this,
                    lazyStatementProxy {
                        target.createStatement()
                    }
            )

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement =
            StatementProxy(
                    this,
                    lazyStatementProxy {
                        target.createStatement(
                            resultSetType,
                            resultSetConcurrency
                        )
                    }
            )

    override fun createStatement(
            resultSetType: Int,
            resultSetConcurrency: Int,
            resultSetHoldability: Int
    ): Statement =
            StatementProxy(
                    this,
                    lazyProxy(
                        interceptorType = StatementInterceptor::class
                    ) {
                        target.createStatement(
                            resultSetType,
                            resultSetConcurrency,
                            resultSetHoldability
                        )
                    }
            )

    override fun prepareStatement(
            sql: String
    ): PreparedStatement =
            PreparedStatementProxy(
                    this,
                    lazyProxy(
                        interceptorType = StatementInterceptor::class
                    ) {
                        target.prepareStatement(sql)
                    },
                    sql
            )

    override fun prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement =
            PreparedStatementProxy(
                    this,
                    lazyProxy(
                        interceptorType = StatementInterceptor::class
                    ) {
                        target.prepareStatement(sql, autoGeneratedKeys)
                    },
                    sql
            )

    override fun prepareStatement(sql: String, columnIndexes: IntArray): PreparedStatement =
            PreparedStatementProxy(
                    this,
                    lazyProxy(
                        interceptorType = StatementInterceptor::class
                    ) {
                        target.prepareStatement(sql, columnIndexes)
                    },
                    sql
            )

    override fun prepareStatement(sql: String, columnNames: Array<out String>?): PreparedStatement =
            PreparedStatementProxy(
                    this,
                    lazyProxy(
                        interceptorType = StatementInterceptor::class
                    ) {
                        target.prepareStatement(sql, columnNames)
                    },
                    sql
            )

    override fun prepareStatement(
            sql: String,
            resultSetType: Int,
            resultSetConcurrency: Int
    ): PreparedStatement =
            PreparedStatementProxy(
                    this,
                    lazyProxy(
                        interceptorType = StatementInterceptor::class
                    ) {
                        target.prepareStatement(
                            sql,
                            resultSetType,
                            resultSetConcurrency
                        )
                    },
                    sql
            )

    override fun prepareStatement(
            sql: String,
            resultSetType: Int,
            resultSetConcurrency: Int,
            resultSetHoldability: Int
    ): PreparedStatement =
            PreparedStatementProxy(
                    this,
                    lazyProxy(
                        interceptorType = StatementInterceptor::class
                    ) {
                        target.prepareStatement(
                            sql,
                            resultSetType,
                            resultSetConcurrency,
                            resultSetHoldability
                        )
                    },
                    sql
            )

    override fun prepareCall(sql: String): CallableStatement =
            throw UnsupportedOperationException()

    override fun prepareCall(
            sql: String?,
            resultSetType: Int,
            resultSetConcurrency: Int
    ): CallableStatement =
            throw UnsupportedOperationException()

    override fun prepareCall(
            sql: String?,
            resultSetType: Int,
            resultSetConcurrency: Int,
            resultSetHoldability: Int
    ): CallableStatement =
            throw UnsupportedOperationException()

    override fun commit() {
        _executionContext?.commit(this)
        _executionContext = null
    }
    
    private inline fun <reified S: Statement> lazyStatementProxy(
        noinline creator: () -> S
    ): S =
        lazyProxy(
            interceptorType = StatementInterceptor::class, 
            creator = creator
        )
}